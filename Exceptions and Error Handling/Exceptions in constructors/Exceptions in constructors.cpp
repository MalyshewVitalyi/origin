#include <iostream>
#include <string>
#include<Windows.h>
#include "geometric_exception.cpp"

class Triangle {
private:
    double sideA, sideB, sideC;

public:
    Triangle(double a, double b, double c) : sideA(a), sideB(b), sideC(c) {
        if (sideA + sideB + sideC != 180) {
            throw GeometricException("Ошибка создания треугольника. Причина: сумма углов не равна 180");
        }
        std::cout << "Треугольник (стороны " << sideA << ", " << sideB << ", " << sideC << ") создан" << std::endl;
    }
};

int main(int argc, char** argv)
{
    setlocale(LC_ALL, "rus");

    SetConsoleCP(1251);

    try {
        Triangle triangle1(60, 60, 60); 
       // Triangle triangle2(30, 60, 90); 
    }
    catch (const GeometricException& e) {
        std::cerr << "Ошибка создания фигуры. Причина: " << e.what() << std::endl;
    }

    return 0;
}

/*В этом задании вы запрещаете создавать классы геометрических фигур с неправильными данными.

Создайте свой класс исключения для ошибок создания геометрической фигуры.
Подумайте, от какого типа его следует ожидать, и не забудьте поместить новый класс в отдельную пару файлов.

Возьмите иерархию классов из заданий . 
Теперь при создании экземпляров классов необходимо проверить аргументы, которые приводятся на входе конструктора. 
Если аргументы не соответствуют ограничениям, объект не должен быть создан, 
а на консоли должно быть выведено содержание сообщения. 
Причина ошибки должна быть сформулирована на уровне конструктора и выведена на экран при обработке ошибок.

Ограничения:

треугольник (стороны и концы произвольные, количество сторон равно 3, длина углов равна 180);
прямоугольный треугольник (угол C всегда равен 90);
равнобедренный треугольник (стороны a и c равные, углы A и C равные);
равносторонний треугольник (все стороны равны, все стороны равны 60);
четырехугольник (стороны и углы произвольные, количество сторон равно 4, большой угол равен 360);
сторона (стороны a, c и b, d попарно равные, все равные углы 90);
квадрат (все стороны равны, все стороны равны 90);
параллелограммы (стороны a, c и b, d попарно условие, углы A, C и B, D попарно условие);
ромб (все стороны равны, углы A, C и B, D попарно равны).
Для проверки формы создайте разные геометрические фигуры — правильные и неправильные. 
В случае успеха выведите на экран сообщение об успешном создании и изменении параметров фигуры. 
В случае, если создание не удалось, вы указываете причину ошибки.

Пример работы программы
Консоль
Прямоугольный треугольник (стороны 3, 4, 5; углы 30, 60, 90) создан
Ошибка создания фигуры. Причина: сумма углов не равна 180

Что использовать для решений.
Исключение из класса будет разумно соблюдаться domain_error.

Для предотвращения создания объектов выбрасывайте заключения, если параметры не соответствуют ограничениям.

Не забудьте при создании ссылки указать причину ошибки.
Для этого вам нужно создать в своем классе конструктор, принимающий символ и передающий ее конструктору родителя.

Для создания исключения используйте ключевое слово throw.

Для ожидания ожидания воспользуйтесь ключевым словом try.

Для обработки определения используйте ключевое слово catch.*/